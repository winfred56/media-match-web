"use client"
import Header from "@/app/components/header";
import {motion} from "framer-motion";
import ProblemSolution from "@/app/components/problem_solution";
import {steps} from "@/app/components/steps";

const splitLetters = (input: string) => {
    const letters: string[] = [];
    const regex = /[\s\S]/gu;
    let letterMatch;

    while ((letterMatch = regex.exec(input)) !== null) {
        letters.push(letterMatch[0])
    }
    return letters;
}
export default function Home() {
    const justMatch = splitLetters(`Just Match it!`);
    const charVariant = {
        hidden: {opacity: 0},
        reveal: {opacity: 1},
    }
    return (
        <main
            className={`main flex flex-col items-center justify-center pt-14 w-full overflow-x-hidden text-text_color`}>
            <Header/>

            <ProblemSolution/>

            <div
                className={`w-[90%] lg:w-[80%] xl:w-[60%] text-center p-2 xl:h-screen rounded-3xl bg-gradient-to-b from-[#121212] to-[#000000] via-75%`}>
                <p className={`text-lg xl:text-xl flex items-center justify-center mt-8`}>HOW IT WORKS</p>
                <h5 className={`flex items-center justify-center gap-4 font-extrabold text-2xl xl:text-5xl mt-4`}>
                    Effortless and Instant Recognition
                    <span>
                        <svg width="52" height="46" viewBox="0 0 52 46" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path
                                d="M44.0169 38.6454C42.275 40.3339 40.2684 41.7257 38.0767 42.7656C35.9363 43.766 33.6795 44.4956 31.3585 44.9374C29.7059 45.2883 28.0265 45.4987 26.3384 45.5666C20.4005 45.7032 14.5543 44.084 9.53273 40.9118C7.30769 39.5002 5.31902 37.7467 3.63991 35.7159C2.55034 34.4084 1.64022 32.9613 0.933676 31.413C0.313407 29.831 -0.00333105 28.1463 2.64145e-05 26.447C2.64145e-05 25.3984 0.723943 25.4998 1.62377 26.1696C2.76625 27.0522 3.75005 28.123 4.53296 29.3359C5.68154 31.8508 7.38104 34.0752 9.50566 35.8444C11.727 37.7157 14.2413 39.2084 16.9478 40.2623C20.2832 41.6155 24.1734 41.7778 27.8269 41.4531C31.8688 41.1876 35.7573 39.8032 39.0577 37.4546C41.0597 35.975 42.7478 34.1122 44.0236 31.9745C45.9997 28.6422 47.1998 24.9077 47.535 21.0481C47.7413 18.0692 47.541 15.0762 46.9396 12.1514C46.8178 11.5086 46.6487 10.8862 46.5269 10.2435C46.2292 7.83492 46.3036 7.03658 47.305 6.23824C47.4882 6.05723 47.6825 5.88776 47.8868 5.73083C48.4551 5.32489 49.6526 6.11646 50.3427 7.97023C50.8942 9.3487 51.2869 10.7855 51.5131 12.2528C51.7721 13.7491 51.9281 15.2614 51.98 16.779C52.0875 19.9141 51.7619 23.0491 51.0125 26.0952C49.9075 30.8568 47.513 35.2222 44.0913 38.713L44.0169 38.6454Z"
                                fill="white"/>
                            <path
                                d="M13.0859 7.84861C13.3363 10.0407 14.6961 12.8078 16.8002 13.7753C17.7068 14.1947 19.0532 13.9309 19.2832 12.7672C19.5947 10.7161 19.1756 8.62081 18.0992 6.8473C17.6675 5.99769 17.0274 5.27144 16.2387 4.73644C15.662 4.43458 14.9776 4.41856 14.3875 4.69309C13.7973 4.96762 13.3687 5.50139 13.228 6.13692C12.6191 8.22748 15.8801 9.12054 16.489 7.02997L16.5634 6.75935L15.7854 7.77419L15.3862 7.8892L14.209 7.39531C15.3524 8.30867 16.3267 10.3789 16.0357 11.8674L18.5187 10.8525C17.4429 10.1884 16.7038 9.09451 16.489 7.84861C16.4608 6.9264 15.7198 6.18539 14.7976 6.15721C13.8666 6.16457 13.1136 6.91754 13.1062 7.84861H13.0859Z"
                                fill="white"/>
                            <path
                                d="M23.3296 3.3219C23.5867 5.5613 24.9939 8.55169 27.1454 9.55976C28.052 9.97923 29.4051 9.7086 29.6284 8.54492C29.9297 6.40819 29.4827 4.23299 28.3632 2.38825C27.9305 1.52389 27.2829 0.785332 26.4824 0.243558C25.9123 -0.058697 25.2346 -0.0807754 24.6461 0.183734C24.0575 0.448243 23.6241 0.969697 23.4717 1.59667C22.8628 3.694 26.1306 4.58706 26.7327 2.4965L26.8139 2.22587L26.0358 3.24071L25.6299 3.35572L24.4324 2.86184C25.6231 3.81578 26.665 6.09578 26.3674 7.63834L28.8503 6.63026C27.822 6.14991 26.8206 4.42469 26.7124 3.31513C26.4688 1.17721 23.0793 1.15015 23.3296 3.31513V3.3219Z"
                                fill="white"/>
                        </svg>
                    </span>
                </h5>

                <div
                    className={`flex flex-col space-y-16 xl:space-y-0 xl:flex-row items-center justify-center p-12 mt-8 lg:mt-12 xl:mt-24`}>

                    {steps.map((step, index) => (
                        <>
                            <div key={index}
                                 className={`relative w-full flex flex-col items-center justify-center text-center`}>
                                {step.svg}
                                <div
                                    className={`absolute xl:w-full top-12 flex flex-col items-center space-y-2 justify-center p-2`}>
                                    <h6 className="how-heading font-extrabold flex items-center text-center justify-center">
                                        {step.heading}
                                    </h6>
                                    <p className={`how-subheading`}>{step.subheading}</p>
                                </div>
                            </div>
                            <svg
                                className={`${index === (steps.length - 1) ? `hidden` : `flex`} xl:w-60 rotate-90 xl:rotate-0`}
                                width="59" height="24" viewBox="0 0 59 24"
                                fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path
                                    d="M49.9235 16.0296L47.8024 15.666L45.6707 15.3445C44.9171 15.2228 44.1568 15.1465 43.3941 15.1158C41.3632 15.0629 39.33 15.0789 37.2994 15.1095L31.212 15.2428C28.7156 15.3124 14.2194 15.3736 11.7292 15.5027C10.4825 15.5507 9.24102 15.6421 7.99677 15.7108C6.75712 15.8098 5.51314 15.8855 4.2787 16.0133C3.52178 16.0541 2.76271 16.0274 2.01053 15.9334C1.66344 15.8844 1.33395 15.75 1.05158 15.5423C0.769211 15.3346 0.542788 15.0601 0.392618 14.7434C-0.154402 13.7943 0.124789 12.6769 1.12865 12.3007C1.78067 12.0722 2.46806 11.961 3.15888 11.9725C6.27647 11.9277 9.387 11.6628 12.4673 11.1798C13.3117 10.9827 26.1805 10.9108 27.0458 10.9663C29.719 11.3325 32.3901 11.021 35.0551 11.2352C36.044 11.3111 37.0353 11.348 38.027 11.393C39.0189 11.4282 40.0112 11.4687 41.0003 11.553C44.528 11.8361 48.0425 12.2517 51.5422 12.7618C52.9292 12.9132 54.2346 13.4927 55.2773 14.4197C55.7609 14.8693 55.5949 15.784 54.9551 15.9127C54.0472 16.084 53.1259 16.1747 52.202 16.1837C51.4432 16.1549 50.6867 16.0827 49.9362 15.9675L49.9235 16.0296Z"
                                    fill="white"/>
                                <path
                                    d="M42.2631 18.6329C43.5815 17.8651 44.9283 17.128 46.3326 16.4634C47.0782 16.1121 47.8327 15.7756 48.579 15.4091C49.8814 14.7371 51.244 14.1886 52.6489 13.7708C54.1249 13.335 55.6538 13.1044 57.1927 13.0856L56.0166 16.8878C54.7405 16.1363 53.4752 15.3649 52.2289 14.5634C47.8704 11.756 43.6793 8.69102 39.608 5.48226C39.0035 4.97366 38.454 4.40296 37.9686 3.77957C37.7506 3.49734 37.6077 3.16448 37.5531 2.81206C37.4986 2.45963 37.5342 2.09913 37.6567 1.7642C37.9591 0.713977 38.9756 0.151009 39.9342 0.597883C40.5457 0.902944 41.1045 1.30404 41.5892 1.78592C43.8483 3.91296 46.3655 5.74799 49.0818 7.24797C49.8312 7.66527 50.65 8.03963 51.249 8.6283C53.17 10.5059 55.5507 11.7499 57.691 13.3248C57.8245 13.4221 57.958 13.5193 58.0926 13.6171L58.2685 13.7452C58.5835 13.9745 58.8145 14.3008 58.9262 14.674C59.0379 15.0472 59.0241 15.4468 58.8868 15.8114C58.7496 16.176 58.4965 16.4855 58.1664 16.6924C57.8363 16.8994 57.4475 16.9923 57.0595 16.9569C55.4981 16.8147 53.8765 17.1559 52.2725 17.6253C49.1276 18.552 46.0765 20.2668 43.1533 22.1837C42.0154 22.9915 40.6753 23.4668 39.2828 23.5567C38.6143 23.5804 38.0808 22.8198 38.4622 22.2693C39.012 21.4827 39.6439 20.7567 40.3471 20.1036C40.9588 19.5831 41.6094 19.1101 42.2931 18.6886L42.2631 18.6329Z"
                                    fill="white"/>
                            </svg>
                        </>
                    ))}
                </div>

                <motion.h2 initial={`hidden`} whileInView={`reveal`}
                           transition={{staggerChildren: .02, repeat: 1, ease: "linear"}}
                           className="text-5xl font-extrabold pb-6 mt-8 lg:mt-12 xl:mt-24">
                    {justMatch.map((char, index) => (
                        <motion.span key={index} transition={{duration: 0.5}}
                                     variants={charVariant}>{char}</motion.span>
                    ))}
                </motion.h2>

                <button className={`cta-btn btn-big`}>
                    Upload a media file
                </button>

            </div>

        </main>
    )
}